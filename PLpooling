import torch
import torch.nn as nn

class LpPool2d(nn.Module):
    def __init__(self, kernel_size, p=2):
        super(LpPool2d, self).__init__()
        self.kernel_size = kernel_size
        self.p = p
    
    def forward(self, x):
        return nn.functional.lp_pool2d(x, self.kernel_size, self.p)

# Example usage
# Create a 3x3 input tensor
input_tensor = torch.tensor([[[1.0, 2.0, 3.0],
                              [4.0, 5.0, 6.0],
                              [7.0, 8.0, 9.0]]])

# Define the LpPool layer with p=2 and a 2x2 pooling kernel
lp_pool_layer = LpPool2d(kernel_size=2, p=2)

# Apply the LpPool layer
output_tensor = lp_pool_layer(input_tensor)

# Output results
print("Input Tensor:")
print(input_tensor)
print("Output Tensor after LpPool:")
print(output_tensor)
